// continue task with something
var someTask = new Task(() => { ... return x })
var someTask = new Task.Run(() => { ... return x })

var someTask_continuation = someTask.ContinueWith((theTask) => {
	theTask.Result // will be x
}, /* continuation option (only when succs, only when failed) */)

var someTask_continuation_continuation = someTask_continuation.ContinueWith(() => { ... })

// Fun fact:
var someTask = new Task.Run( async () => { ... await asyncFunc() ... return x })
							 ^^^^^			   ^^^^^

// Calling the caller thred (propably the UI/main thred)
Task.Run(() => {
	Dispatcher.Invoke(() => {
		// here we are in the main threds context
	})
})


		<***********************>
// Six ways to initiate tasks on another thread in .NET
// https://markheath.net/post/starting-threads-in-dotnet

// 1)
// Asynchronous Delegates
Action<string> d = BackgroundTask;
d.BeginInvoke("BeginInvoke", null, null);

// 2)
// Thread Class
var t = new Thread(BackgroundTask);
t.Name = "My Thread";
t.Priority = ThreadPriority.AboveNormal;
t.Start("Thread");

// 3)
// ThreadPool
// disadvantage of this approach compared to the previous two is that it provides no mechanism for notification of when your task has finished. Itâ€™s up to you to report completion and catch exceptions.

ThreadPool.QueueUserWorkItem(BackgroundTask, "ThreadPool");

// 4)
// BackgroundWorker Component
// covers all the basics of reporting progress, cancellation, catching exceptions, and getting you back onto the UI thread

backgroundWorker1.DoWork += BackgroundWorker1OnDoWork;

// 5)
// Task Parallel Library (TPL)
// It is a powerful model, supporting chaining tasks together, executing them in parallel, waiting on one or many tasks to complete, passing cancellation tokens around, and even controlling what thread they will run on

Task.Run(() => BackgroundTask("TPL"));

// 6)
// C# 5 async await


		<***********************>
// https://www.c-sharpcorner.com/article/Threads-in-CSharp/
// Background threads are useful for any operation that should continue as long as an application is running but should not prevent the application from terminating, such as monitoring file system changes or incoming socket connections

